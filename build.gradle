plugins {
    id 'java'
    id 'maven-publish'

    id 'org.openmicroscopy.dslplugin' version '1.0'
    id 'org.openmicroscopy.blitzplugin' version '1.0'
}

group 'openmicroscopy.com'
version '1.0-SNAPSHOT'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'http://repo.boundlessgeo.com/main/' }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile 'org.openmicroscopy:omero-server:1.0-SNAPSHOT'
}

sourceSets {
    main {
        java {
            srcDirs "src/main/java", "src/generated/java"
        }
        resources {
            srcDirs "src/main/resources", "src/generated/resources"
        }
    }
}

blitz {
    api {
        java {
            language 'java'
            outputDir 'src/generated/interfaces'
        }

        ice {
            language 'ice'
            outputDir 'src/generated/ice'
        }
    }
}

dsl {
    templateDir = "src/main/resources/templates"
    mappingFiles = project.fileTree(dir: "${buildDir}/extracted/mappings", include: '**/*.ome.xml')

    generate {
        javaIceMap {
            template = "java_ice_map.vm"
            outFile = project.file("src/generated/java/omero/util/IceMap.java")
        }

        hibernate {
            template = "cfg.vm"
            outFile = "hibernate.cfg.xml"
        }
    }
}

//task genObjReg(type: DslTask) {
//    profile = "psql"
//    template = file("src/main/resources/templates/java_obj_reg.vm")
//    outputPath = file("src/generated/java")
//    omeXmlFiles = fileTree(dir: "extracted/mappings", include: '**/*.ome.xml')
//    formatOutput = { st ->
//        "${st.getShortname()}.java"
//    }
//}

// compileJava.dependsOn()