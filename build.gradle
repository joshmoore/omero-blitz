buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "gradle.plugin.com.zeroc.gradle.ice-builder:slice:1.4.5"
    }
}

plugins {
    id "java"
    id 'maven-publish'
    id 'org.openmicroscopy.dsl' version '0.1.0'
    id 'org.openmicroscopy.blitz' version '0.1.0'
}

apply plugin: "com.zeroc.gradle.ice-builder.slice"

group = 'openmicroscopy.com'
version = '1.0-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
    mavenCentral()
    mavenLocal()
    maven { url 'http://repo.boundlessgeo.com/main/' }
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile 'org.openmicroscopy:omero-server:1.0-SNAPSHOT'
}

sourceSets {
    main {
        java {
            srcDirs "src/generated/java"
        }
        resources {
            srcDirs "src/generated/resources"
        }
    }
}

blitz {
    api {
        java {
            language "java"
            outputDir "src/generated/java/omero/model"
        }

        ice {
            language "ice"
            outputDir "src/generated/slice/omero/model"
            outputName "\$1"
        }
    }
}

dsl {
    templateFiles fileTree(dir: "src/main/resources/templates",
            include: '**/*.vm')

    outputPath = "src/generated"

    resource {
        iceMap {
            template "java_ice_map.vm"
            outputFile "java/omero/util/IceMap.java"
        }

        objectFactoryRegistry {
            template "java_obj_reg.vm"
            outputFile "java/omero/util/ModelObjectFactoryRegistry.java"
        }
    }
}

slice {
    output = file("src/generated/java")
    java {
        set1 {
            include = ["src/generated/slice", "src/main/slice"]
        }
    }
}

//task genObjReg(type: DslTask) {
//    profile = "psql"
//    template = file("src/main/resources/templates/java_obj_reg.vm")
//    outputPath = file("src/generated/java")
//    omeXmlFiles = fileTree(dir: "extracted/mappings", include: '**/*.ome.xml')
//    formatOutput = { st ->
//        "${st.getShortname()}.java"
//    }
//}

// compileJava.dependsOn()