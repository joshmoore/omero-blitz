// Runs the DSLTask OMERO plugin
dsl() {
    def mappingsDir = "extracted/omero-model"
    def mappingsTree = project.fileTree(dir: mappingsDir, include: '**/*.ome.xml')

    velocity {
        resource_loader = 'file'
        file_resource_loader_path = "src/main/resources/templates"
        file_resource_loader_cache = false
    }

    generate {
        javaIceMap {
            template = "java_ice_map.vm"
            outFile = project.file("src/generated/java/omero/util/IceMap.java")
            omeXmlFiles = mappingsTree
        }

        javaModelObjectFactoryRegistry {
            template = "java_obj_reg.vm"
            outFile = project.file("src/generated/java/omero/util//ModelObjectFactoryRegistry.java/")
            omeXmlFiles = mappingsTree
        }

        cppModelObjectFactoryRegistry {
            template = "cpp_obj_reg.vm"
            outFile = project.file("src/generated/cpp/omero/model/ObjectFactory.cpp")
            omeXmlFiles = mappingsTree
        }

        pythonModelObjectFactoryRegistry {
            template = "py_obj_reg.vm"
            outFile = project.file("src/generated/python/omero/ObjectFactoryRegistrar.py")
            omeXmlFiles = mappingsTree
        }

        combined {
            template = "combined.vm"
            outputPath = project.file("src/generated/combined")
            omeXmlFiles = mappingsTree
            formatOutput = { st ->
                "${st.getShortname()}I.combined"
            }
        }
    }
}

// This section takes the output of the combined.vm template and splits it into
// the various sections. All of these files represent the Ice model and our
// specializations of it
def myCopySpec = project.copySpec {
    from("src/generated/combined") {
        include '**/*.combined'
    }
}

static def filerLine(String line, String prefix) {
    return line.matches("^\\[all](.*)|^\\[${prefix}](.*)") ?
            line.replaceAll("^\\[all]|^\\[${prefix}]", "") :
            null
}

// Handle headers
task splitCppHeaders(type: Copy) {
    into "src/generated/cpp/headers"
    with myCopySpec
    filter { filerLine(it, "hdr") }
    rename '(.*?)I[.]combined', 'omero/model/$1I.h'
}

// Handles sources
task splitCppSources(type: Copy) {
    with myCopySpec
    into "src/generated/cpp/sources"
//    filter { line ->
//        line.matches("\\[cpp]") ? line.replaceAll("\\[cpp]", "") : ""
//    }
}
