    /*
    **   Generated by blitz/resources/templates/combined.vm
    **   See ../../README.ice for information on these types.
    **
    **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
    **   Use is subject to license terms supplied in LICENSE.txt
    **
    */
 #ifndef NODE_ICE
 #define NODE_ICE
 #include <omero/model/IObject.ice>
 #include <omero/RTypes.ice>
 #include <omero/model/RTypes.ice>
 #include <omero/System.ice>
 #include <omero/Collections.ice>
 module omero {
   module model {
     class Session;
     class NodeAnnotationLink;
     class Annotation;
     class Details;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Session> NodeSessionsSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::NodeAnnotationLink> NodeAnnotationLinksSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Annotation> NodeLinkedAnnotationSeq;
     ["protected"] class Node
     extends omero::model::IObject
     {
       omero::RInt version;
       omero::RInt getVersion();
       void setVersion(omero::RInt theVersion);
       NodeSessionsSeq sessionsSeq;
       bool sessionsLoaded;
       /*
        * Unloads the sessions collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfSessions() on how to test for unloaded collections.
        * See reloadSessions() on how to reset the value.
        *
        */
       void unloadSessions();
       int sizeOfSessions();
       NodeSessionsSeq copySessions();
       // See language-specific iterator methods
       void addSession(Session target);
       /*
        * Adds all the members of the NodeSessionsSeq sequence to
        * the sessionsSeq field.
        */
       void addAllSessionSet(NodeSessionsSeq targets);
       void removeSession(Session theTarget);
       /*
        * Removes all the members of the NodeSessionsSeq sequence from
        * the sessionsSeq field.
        */
       void removeAllSessionSet(NodeSessionsSeq targets);
       void clearSessions();

       /*
        * Allows reloading the protected sessions collection
        * from another instance of Node. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadSessions(Node toCopy);
       omero::RString uuid;
       omero::RString getUuid();
       void setUuid(omero::RString theUuid);
       omero::RString conn;
       omero::RString getConn();
       void setConn(omero::RString theConn);
       omero::RTime up;
       omero::RTime getUp();
       void setUp(omero::RTime theUp);
       omero::RTime down;
       omero::RTime getDown();
       void setDown(omero::RTime theDown);
       omero::RInt scale;
       omero::RInt getScale();
       void setScale(omero::RInt theScale);
       NodeAnnotationLinksSeq annotationLinksSeq;
       bool annotationLinksLoaded;
       omero::sys::CountMap annotationLinksCountPerOwner;
       /*
        * Unloads the annotationLinks collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfAnnotationLinks() on how to test for unloaded collections.
        * See reloadAnnotationLinks() on how to reset the value.
        *
        */
       void unloadAnnotationLinks();
       int sizeOfAnnotationLinks();
       NodeAnnotationLinksSeq copyAnnotationLinks();
       // See language-specific iterator methods
       void addNodeAnnotationLink(NodeAnnotationLink target);
       /*
        * Adds all the members of the NodeAnnotationLinksSeq sequence to
        * the annotationLinksSeq field.
        */
       void addAllNodeAnnotationLinkSet(NodeAnnotationLinksSeq targets);
       void removeNodeAnnotationLink(NodeAnnotationLink theTarget);
       /*
        * Removes all the members of the NodeAnnotationLinksSeq sequence from
        * the annotationLinksSeq field.
        */
       void removeAllNodeAnnotationLinkSet(NodeAnnotationLinksSeq targets);
       void clearAnnotationLinks();

       /*
        * Allows reloading the protected annotationLinks collection
        * from another instance of Node. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadAnnotationLinks(Node toCopy);
       omero::sys::CountMap getAnnotationLinksCountPerOwner();
       NodeAnnotationLink linkAnnotation(Annotation addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addNodeAnnotationLinkToBoth(omero::model::NodeAnnotationLink link, bool bothSides);
       NodeAnnotationLinksSeq findNodeAnnotationLink(Annotation removal);
       void unlinkAnnotation(Annotation removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removeNodeAnnotationLinkFromBoth(omero::model::NodeAnnotationLink link, bool bothSides);
       NodeLinkedAnnotationSeq linkedAnnotationList();
     };
   };
 };
 #endif // NODE_ICE
