    /*
    **   Generated by blitz/resources/templates/combined.vm
    **   See ../../README.ice for information on these types.
    **
    **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
    **   Use is subject to license terms supplied in LICENSE.txt
    **
    */
 #ifndef JOB_ICE
 #define JOB_ICE
 #include <omero/model/IObject.ice>
 #include <omero/RTypes.ice>
 #include <omero/model/RTypes.ice>
 #include <omero/System.ice>
 #include <omero/Collections.ice>
 module omero {
   module model {
     class JobStatus;
     class JobOriginalFileLink;
     class OriginalFile;
     class Details;
     ["java:type:java.util.ArrayList"] sequence<omero::model::JobOriginalFileLink> JobOriginalFileLinksSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::OriginalFile> JobLinkedOriginalFileSeq;
     ["protected"] class Job
     extends omero::model::IObject
     {
       omero::RInt version;
       omero::RInt getVersion();
       void setVersion(omero::RInt theVersion);
       omero::RString username;
       omero::RString getUsername();
       void setUsername(omero::RString theUsername);
       omero::RString groupname;
       omero::RString getGroupname();
       void setGroupname(omero::RString theGroupname);
       omero::RString type;
       omero::RString getType();
       void setType(omero::RString theType);
       omero::RString message;
       omero::RString getMessage();
       void setMessage(omero::RString theMessage);
       omero::model::JobStatus status;
       omero::model::JobStatus getStatus();
       void setStatus(omero::model::JobStatus theStatus);
       omero::RTime submitted;
       omero::RTime getSubmitted();
       void setSubmitted(omero::RTime theSubmitted);
       omero::RTime scheduledFor;
       omero::RTime getScheduledFor();
       void setScheduledFor(omero::RTime theScheduledFor);
       omero::RTime started;
       omero::RTime getStarted();
       void setStarted(omero::RTime theStarted);
       omero::RTime finished;
       omero::RTime getFinished();
       void setFinished(omero::RTime theFinished);
       JobOriginalFileLinksSeq originalFileLinksSeq;
       bool originalFileLinksLoaded;
       omero::sys::CountMap originalFileLinksCountPerOwner;
       /*
        * Unloads the originalFileLinks collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfOriginalFileLinks() on how to test for unloaded collections.
        * See reloadOriginalFileLinks() on how to reset the value.
        *
        */
       void unloadOriginalFileLinks();
       int sizeOfOriginalFileLinks();
       JobOriginalFileLinksSeq copyOriginalFileLinks();
       // See language-specific iterator methods
       void addJobOriginalFileLink(JobOriginalFileLink target);
       /*
        * Adds all the members of the JobOriginalFileLinksSeq sequence to
        * the originalFileLinksSeq field.
        */
       void addAllJobOriginalFileLinkSet(JobOriginalFileLinksSeq targets);
       void removeJobOriginalFileLink(JobOriginalFileLink theTarget);
       /*
        * Removes all the members of the JobOriginalFileLinksSeq sequence from
        * the originalFileLinksSeq field.
        */
       void removeAllJobOriginalFileLinkSet(JobOriginalFileLinksSeq targets);
       void clearOriginalFileLinks();

       /*
        * Allows reloading the protected originalFileLinks collection
        * from another instance of Job. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadOriginalFileLinks(Job toCopy);
       omero::sys::CountMap getOriginalFileLinksCountPerOwner();
       JobOriginalFileLink linkOriginalFile(OriginalFile addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addJobOriginalFileLinkToBoth(omero::model::JobOriginalFileLink link, bool bothSides);
       JobOriginalFileLinksSeq findJobOriginalFileLink(OriginalFile removal);
       void unlinkOriginalFile(OriginalFile removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removeJobOriginalFileLinkFromBoth(omero::model::JobOriginalFileLink link, bool bothSides);
       JobLinkedOriginalFileSeq linkedOriginalFileList();
     };
   };
 };
 #endif // JOB_ICE
