    /*
    **   Generated by blitz/resources/templates/combined.vm
    **   See ../../README.ice for information on these types.
    **
    **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
    **   Use is subject to license terms supplied in LICENSE.txt
    **
    */
 #ifndef FILTERSET_ICE
 #define FILTERSET_ICE
 #include <omero/model/IObject.ice>
 #include <omero/RTypes.ice>
 #include <omero/model/RTypes.ice>
 #include <omero/System.ice>
 #include <omero/Collections.ice>
 module omero {
   module model {
     class Instrument;
     class FilterSetExcitationFilterLink;
     class Filter;
     class Dichroic;
     class FilterSetEmissionFilterLink;
     class Filter;
     class Details;
     ["java:type:java.util.ArrayList"] sequence<omero::model::FilterSetExcitationFilterLink> FilterSetExcitationFilterLinkSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Filter> FilterSetLinkedExcitationFilterSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::FilterSetEmissionFilterLink> FilterSetEmissionFilterLinkSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Filter> FilterSetLinkedEmissionFilterSeq;
     ["protected"] class FilterSet
     extends omero::model::IObject
     {
       omero::RInt version;
       omero::RInt getVersion();
       void setVersion(omero::RInt theVersion);
       omero::RString manufacturer;
       omero::RString getManufacturer();
       void setManufacturer(omero::RString theManufacturer);
       omero::RString model;
       omero::RString getModel();
       void setModel(omero::RString theModel);
       omero::RString lotNumber;
       omero::RString getLotNumber();
       void setLotNumber(omero::RString theLotNumber);
       omero::RString serialNumber;
       omero::RString getSerialNumber();
       void setSerialNumber(omero::RString theSerialNumber);
       omero::model::Instrument instrument;
       omero::model::Instrument getInstrument();
       void setInstrument(omero::model::Instrument theInstrument);
       FilterSetExcitationFilterLinkSeq excitationFilterLinkSeq;
       bool excitationFilterLinkLoaded;
       omero::sys::CountMap excitationFilterLinkCountPerOwner;
       /*
        * Unloads the excitationFilterLink collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfExcitationFilterLink() on how to test for unloaded collections.
        * See reloadExcitationFilterLink() on how to reset the value.
        *
        */
       void unloadExcitationFilterLink();
       int sizeOfExcitationFilterLink();
       FilterSetExcitationFilterLinkSeq copyExcitationFilterLink();
       // See language-specific iterator methods
       void addFilterSetExcitationFilterLink(FilterSetExcitationFilterLink target);
       /*
        * Adds all the members of the FilterSetExcitationFilterLinkSeq sequence to
        * the excitationFilterLinkSeq field.
        */
       void addAllFilterSetExcitationFilterLinkSet(FilterSetExcitationFilterLinkSeq targets);
       void removeFilterSetExcitationFilterLink(FilterSetExcitationFilterLink theTarget);
       /*
        * Removes all the members of the FilterSetExcitationFilterLinkSeq sequence from
        * the excitationFilterLinkSeq field.
        */
       void removeAllFilterSetExcitationFilterLinkSet(FilterSetExcitationFilterLinkSeq targets);
       void clearExcitationFilterLink();

       /*
        * Allows reloading the protected excitationFilterLink collection
        * from another instance of FilterSet. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadExcitationFilterLink(FilterSet toCopy);
       omero::sys::CountMap getExcitationFilterLinkCountPerOwner();
       FilterSetExcitationFilterLink linkExcitationFilter(Filter addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addFilterSetExcitationFilterLinkToBoth(omero::model::FilterSetExcitationFilterLink link, bool bothSides);
       FilterSetExcitationFilterLinkSeq findFilterSetExcitationFilterLink(Filter removal);
       void unlinkExcitationFilter(Filter removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removeFilterSetExcitationFilterLinkFromBoth(omero::model::FilterSetExcitationFilterLink link, bool bothSides);
       FilterSetLinkedExcitationFilterSeq linkedExcitationFilterList();
       omero::model::Dichroic dichroic;
       omero::model::Dichroic getDichroic();
       void setDichroic(omero::model::Dichroic theDichroic);
       FilterSetEmissionFilterLinkSeq emissionFilterLinkSeq;
       bool emissionFilterLinkLoaded;
       omero::sys::CountMap emissionFilterLinkCountPerOwner;
       /*
        * Unloads the emissionFilterLink collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfEmissionFilterLink() on how to test for unloaded collections.
        * See reloadEmissionFilterLink() on how to reset the value.
        *
        */
       void unloadEmissionFilterLink();
       int sizeOfEmissionFilterLink();
       FilterSetEmissionFilterLinkSeq copyEmissionFilterLink();
       // See language-specific iterator methods
       void addFilterSetEmissionFilterLink(FilterSetEmissionFilterLink target);
       /*
        * Adds all the members of the FilterSetEmissionFilterLinkSeq sequence to
        * the emissionFilterLinkSeq field.
        */
       void addAllFilterSetEmissionFilterLinkSet(FilterSetEmissionFilterLinkSeq targets);
       void removeFilterSetEmissionFilterLink(FilterSetEmissionFilterLink theTarget);
       /*
        * Removes all the members of the FilterSetEmissionFilterLinkSeq sequence from
        * the emissionFilterLinkSeq field.
        */
       void removeAllFilterSetEmissionFilterLinkSet(FilterSetEmissionFilterLinkSeq targets);
       void clearEmissionFilterLink();

       /*
        * Allows reloading the protected emissionFilterLink collection
        * from another instance of FilterSet. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadEmissionFilterLink(FilterSet toCopy);
       omero::sys::CountMap getEmissionFilterLinkCountPerOwner();
       FilterSetEmissionFilterLink linkEmissionFilter(Filter addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addFilterSetEmissionFilterLinkToBoth(omero::model::FilterSetEmissionFilterLink link, bool bothSides);
       FilterSetEmissionFilterLinkSeq findFilterSetEmissionFilterLink(Filter removal);
       void unlinkEmissionFilter(Filter removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removeFilterSetEmissionFilterLinkFromBoth(omero::model::FilterSetEmissionFilterLink link, bool bothSides);
       FilterSetLinkedEmissionFilterSeq linkedEmissionFilterList();
     };
   };
 };
 #endif // FILTERSET_ICE
