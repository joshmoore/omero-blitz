    /*
    **   Generated by blitz/resources/templates/combined.vm
    **   See ../../README.ice for information on these types.
    **
    **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
    **   Use is subject to license terms supplied in LICENSE.txt
    **
    */
 #ifndef SHAPE_ICE
 #define SHAPE_ICE
 #include <omero/model/IObject.ice>
 #include <omero/RTypes.ice>
 #include <omero/model/RTypes.ice>
 #include <omero/System.ice>
 #include <omero/Collections.ice>
 module omero {
   module model {
     class Roi;
     class AffineTransform;
     class Length;
     class Length;
     class ShapeAnnotationLink;
     class Annotation;
     class Details;
     ["java:type:java.util.ArrayList"] sequence<omero::model::ShapeAnnotationLink> ShapeAnnotationLinksSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Annotation> ShapeLinkedAnnotationSeq;
     ["protected"] class Shape
     extends omero::model::IObject
     {
       omero::RInt version;
       omero::RInt getVersion();
       void setVersion(omero::RInt theVersion);
       omero::RInt theZ;
       omero::RInt getTheZ();
       void setTheZ(omero::RInt theTheZ);
       omero::RInt theT;
       omero::RInt getTheT();
       void setTheT(omero::RInt theTheT);
       omero::RInt theC;
       omero::RInt getTheC();
       void setTheC(omero::RInt theTheC);
       omero::model::Roi roi;
       omero::model::Roi getRoi();
       void setRoi(omero::model::Roi theRoi);
       omero::RBool locked;
       omero::RBool getLocked();
       void setLocked(omero::RBool theLocked);
       omero::model::AffineTransform transform;
       omero::model::AffineTransform getTransform();
       void setTransform(omero::model::AffineTransform theTransform);
       omero::RInt fillColor;
       omero::RInt getFillColor();
       void setFillColor(omero::RInt theFillColor);
       omero::RString fillRule;
       omero::RString getFillRule();
       void setFillRule(omero::RString theFillRule);
       omero::RInt strokeColor;
       omero::RInt getStrokeColor();
       void setStrokeColor(omero::RInt theStrokeColor);
       omero::RString strokeDashArray;
       omero::RString getStrokeDashArray();
       void setStrokeDashArray(omero::RString theStrokeDashArray);
       omero::model::Length strokeWidth;
       omero::model::Length getStrokeWidth();
       void setStrokeWidth(omero::model::Length theStrokeWidth);
       omero::RString fontFamily;
       omero::RString getFontFamily();
       void setFontFamily(omero::RString theFontFamily);
       omero::model::Length fontSize;
       omero::model::Length getFontSize();
       void setFontSize(omero::model::Length theFontSize);
       omero::RString fontStyle;
       omero::RString getFontStyle();
       void setFontStyle(omero::RString theFontStyle);
       ShapeAnnotationLinksSeq annotationLinksSeq;
       bool annotationLinksLoaded;
       omero::sys::CountMap annotationLinksCountPerOwner;
       /*
        * Unloads the annotationLinks collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfAnnotationLinks() on how to test for unloaded collections.
        * See reloadAnnotationLinks() on how to reset the value.
        *
        */
       void unloadAnnotationLinks();
       int sizeOfAnnotationLinks();
       ShapeAnnotationLinksSeq copyAnnotationLinks();
       // See language-specific iterator methods
       void addShapeAnnotationLink(ShapeAnnotationLink target);
       /*
        * Adds all the members of the ShapeAnnotationLinksSeq sequence to
        * the annotationLinksSeq field.
        */
       void addAllShapeAnnotationLinkSet(ShapeAnnotationLinksSeq targets);
       void removeShapeAnnotationLink(ShapeAnnotationLink theTarget);
       /*
        * Removes all the members of the ShapeAnnotationLinksSeq sequence from
        * the annotationLinksSeq field.
        */
       void removeAllShapeAnnotationLinkSet(ShapeAnnotationLinksSeq targets);
       void clearAnnotationLinks();

       /*
        * Allows reloading the protected annotationLinks collection
        * from another instance of Shape. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadAnnotationLinks(Shape toCopy);
       omero::sys::CountMap getAnnotationLinksCountPerOwner();
       ShapeAnnotationLink linkAnnotation(Annotation addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addShapeAnnotationLinkToBoth(omero::model::ShapeAnnotationLink link, bool bothSides);
       ShapeAnnotationLinksSeq findShapeAnnotationLink(Annotation removal);
       void unlinkAnnotation(Annotation removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removeShapeAnnotationLinkFromBoth(omero::model::ShapeAnnotationLink link, bool bothSides);
       ShapeLinkedAnnotationSeq linkedAnnotationList();
     };
   };
 };
 #endif // SHAPE_ICE
