    /*
    **   Generated by blitz/resources/templates/combined.vm
    **   See ../../README.ice for information on these types.
    **
    **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
    **   Use is subject to license terms supplied in LICENSE.txt
    **
    */
 #ifndef DATASET_ICE
 #define DATASET_ICE
 #include <omero/model/IObject.ice>
 #include <omero/RTypes.ice>
 #include <omero/model/RTypes.ice>
 #include <omero/System.ice>
 #include <omero/Collections.ice>
 module omero {
   module model {
     class ProjectDatasetLink;
     class Project;
     class DatasetImageLink;
     class Image;
     class DatasetAnnotationLink;
     class Annotation;
     class Details;
     ["java:type:java.util.ArrayList"] sequence<omero::model::ProjectDatasetLink> DatasetProjectLinksSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Project> DatasetLinkedProjectSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::DatasetImageLink> DatasetImageLinksSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Image> DatasetLinkedImageSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::DatasetAnnotationLink> DatasetAnnotationLinksSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Annotation> DatasetLinkedAnnotationSeq;
     ["protected"] class Dataset
     extends omero::model::IObject
     {
       omero::RInt version;
       omero::RInt getVersion();
       void setVersion(omero::RInt theVersion);
       DatasetProjectLinksSeq projectLinksSeq;
       bool projectLinksLoaded;
       omero::sys::CountMap projectLinksCountPerOwner;
       /*
        * Unloads the projectLinks collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfProjectLinks() on how to test for unloaded collections.
        * See reloadProjectLinks() on how to reset the value.
        *
        */
       void unloadProjectLinks();
       int sizeOfProjectLinks();
       DatasetProjectLinksSeq copyProjectLinks();
       // See language-specific iterator methods
       void addProjectDatasetLink(ProjectDatasetLink target);
       /*
        * Adds all the members of the DatasetProjectLinksSeq sequence to
        * the projectLinksSeq field.
        */
       void addAllProjectDatasetLinkSet(DatasetProjectLinksSeq targets);
       void removeProjectDatasetLink(ProjectDatasetLink theTarget);
       /*
        * Removes all the members of the DatasetProjectLinksSeq sequence from
        * the projectLinksSeq field.
        */
       void removeAllProjectDatasetLinkSet(DatasetProjectLinksSeq targets);
       void clearProjectLinks();

       /*
        * Allows reloading the protected projectLinks collection
        * from another instance of Dataset. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadProjectLinks(Dataset toCopy);
       omero::sys::CountMap getProjectLinksCountPerOwner();
       ProjectDatasetLink linkProject(Project addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addProjectDatasetLinkToBoth(omero::model::ProjectDatasetLink link, bool bothSides);
       DatasetProjectLinksSeq findProjectDatasetLink(Project removal);
       void unlinkProject(Project removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removeProjectDatasetLinkFromBoth(omero::model::ProjectDatasetLink link, bool bothSides);
       DatasetLinkedProjectSeq linkedProjectList();
       DatasetImageLinksSeq imageLinksSeq;
       bool imageLinksLoaded;
       omero::sys::CountMap imageLinksCountPerOwner;
       /*
        * Unloads the imageLinks collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfImageLinks() on how to test for unloaded collections.
        * See reloadImageLinks() on how to reset the value.
        *
        */
       void unloadImageLinks();
       int sizeOfImageLinks();
       DatasetImageLinksSeq copyImageLinks();
       // See language-specific iterator methods
       void addDatasetImageLink(DatasetImageLink target);
       /*
        * Adds all the members of the DatasetImageLinksSeq sequence to
        * the imageLinksSeq field.
        */
       void addAllDatasetImageLinkSet(DatasetImageLinksSeq targets);
       void removeDatasetImageLink(DatasetImageLink theTarget);
       /*
        * Removes all the members of the DatasetImageLinksSeq sequence from
        * the imageLinksSeq field.
        */
       void removeAllDatasetImageLinkSet(DatasetImageLinksSeq targets);
       void clearImageLinks();

       /*
        * Allows reloading the protected imageLinks collection
        * from another instance of Dataset. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadImageLinks(Dataset toCopy);
       omero::sys::CountMap getImageLinksCountPerOwner();
       DatasetImageLink linkImage(Image addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addDatasetImageLinkToBoth(omero::model::DatasetImageLink link, bool bothSides);
       DatasetImageLinksSeq findDatasetImageLink(Image removal);
       void unlinkImage(Image removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removeDatasetImageLinkFromBoth(omero::model::DatasetImageLink link, bool bothSides);
       DatasetLinkedImageSeq linkedImageList();
       DatasetAnnotationLinksSeq annotationLinksSeq;
       bool annotationLinksLoaded;
       omero::sys::CountMap annotationLinksCountPerOwner;
       /*
        * Unloads the annotationLinks collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfAnnotationLinks() on how to test for unloaded collections.
        * See reloadAnnotationLinks() on how to reset the value.
        *
        */
       void unloadAnnotationLinks();
       int sizeOfAnnotationLinks();
       DatasetAnnotationLinksSeq copyAnnotationLinks();
       // See language-specific iterator methods
       void addDatasetAnnotationLink(DatasetAnnotationLink target);
       /*
        * Adds all the members of the DatasetAnnotationLinksSeq sequence to
        * the annotationLinksSeq field.
        */
       void addAllDatasetAnnotationLinkSet(DatasetAnnotationLinksSeq targets);
       void removeDatasetAnnotationLink(DatasetAnnotationLink theTarget);
       /*
        * Removes all the members of the DatasetAnnotationLinksSeq sequence from
        * the annotationLinksSeq field.
        */
       void removeAllDatasetAnnotationLinkSet(DatasetAnnotationLinksSeq targets);
       void clearAnnotationLinks();

       /*
        * Allows reloading the protected annotationLinks collection
        * from another instance of Dataset. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadAnnotationLinks(Dataset toCopy);
       omero::sys::CountMap getAnnotationLinksCountPerOwner();
       DatasetAnnotationLink linkAnnotation(Annotation addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addDatasetAnnotationLinkToBoth(omero::model::DatasetAnnotationLink link, bool bothSides);
       DatasetAnnotationLinksSeq findDatasetAnnotationLink(Annotation removal);
       void unlinkAnnotation(Annotation removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removeDatasetAnnotationLinkFromBoth(omero::model::DatasetAnnotationLink link, bool bothSides);
       DatasetLinkedAnnotationSeq linkedAnnotationList();
       omero::RString name;
       omero::RString getName();
       void setName(omero::RString theName);
       omero::RString description;
       omero::RString getDescription();
       void setDescription(omero::RString theDescription);
     };
   };
 };
 #endif // DATASET_ICE
