    /*
    **   Generated by blitz/resources/templates/combined.vm
    **   See ../../README.ice for information on these types.
    **
    **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
    **   Use is subject to license terms supplied in LICENSE.txt
    **
    */
 #ifndef DICHROIC_ICE
 #define DICHROIC_ICE
 #include <omero/model/IObject.ice>
 #include <omero/RTypes.ice>
 #include <omero/model/RTypes.ice>
 #include <omero/System.ice>
 #include <omero/Collections.ice>
 module omero {
   module model {
     class Instrument;
     class DichroicAnnotationLink;
     class Annotation;
     class Details;
     ["java:type:java.util.ArrayList"] sequence<omero::model::DichroicAnnotationLink> DichroicAnnotationLinksSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Annotation> DichroicLinkedAnnotationSeq;
     ["protected"] class Dichroic
     extends omero::model::IObject
     {
       omero::RInt version;
       omero::RInt getVersion();
       void setVersion(omero::RInt theVersion);
       omero::RString manufacturer;
       omero::RString getManufacturer();
       void setManufacturer(omero::RString theManufacturer);
       omero::RString model;
       omero::RString getModel();
       void setModel(omero::RString theModel);
       omero::RString lotNumber;
       omero::RString getLotNumber();
       void setLotNumber(omero::RString theLotNumber);
       omero::RString serialNumber;
       omero::RString getSerialNumber();
       void setSerialNumber(omero::RString theSerialNumber);
       omero::model::Instrument instrument;
       omero::model::Instrument getInstrument();
       void setInstrument(omero::model::Instrument theInstrument);
       DichroicAnnotationLinksSeq annotationLinksSeq;
       bool annotationLinksLoaded;
       omero::sys::CountMap annotationLinksCountPerOwner;
       /*
        * Unloads the annotationLinks collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfAnnotationLinks() on how to test for unloaded collections.
        * See reloadAnnotationLinks() on how to reset the value.
        *
        */
       void unloadAnnotationLinks();
       int sizeOfAnnotationLinks();
       DichroicAnnotationLinksSeq copyAnnotationLinks();
       // See language-specific iterator methods
       void addDichroicAnnotationLink(DichroicAnnotationLink target);
       /*
        * Adds all the members of the DichroicAnnotationLinksSeq sequence to
        * the annotationLinksSeq field.
        */
       void addAllDichroicAnnotationLinkSet(DichroicAnnotationLinksSeq targets);
       void removeDichroicAnnotationLink(DichroicAnnotationLink theTarget);
       /*
        * Removes all the members of the DichroicAnnotationLinksSeq sequence from
        * the annotationLinksSeq field.
        */
       void removeAllDichroicAnnotationLinkSet(DichroicAnnotationLinksSeq targets);
       void clearAnnotationLinks();

       /*
        * Allows reloading the protected annotationLinks collection
        * from another instance of Dichroic. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadAnnotationLinks(Dichroic toCopy);
       omero::sys::CountMap getAnnotationLinksCountPerOwner();
       DichroicAnnotationLink linkAnnotation(Annotation addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addDichroicAnnotationLinkToBoth(omero::model::DichroicAnnotationLink link, bool bothSides);
       DichroicAnnotationLinksSeq findDichroicAnnotationLink(Annotation removal);
       void unlinkAnnotation(Annotation removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removeDichroicAnnotationLinkFromBoth(omero::model::DichroicAnnotationLink link, bool bothSides);
       DichroicLinkedAnnotationSeq linkedAnnotationList();
     };
   };
 };
 #endif // DICHROIC_ICE
