    /*
    **   Generated by blitz/resources/templates/combined.vm
    **   See ../../README.ice for information on these types.
    **
    **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
    **   Use is subject to license terms supplied in LICENSE.txt
    **
    */
 #ifndef FOLDER_ICE
 #define FOLDER_ICE
 #include <omero/model/IObject.ice>
 #include <omero/RTypes.ice>
 #include <omero/model/RTypes.ice>
 #include <omero/System.ice>
 #include <omero/Collections.ice>
 module omero {
   module model {
     class Folder;
     class Folder;
     class FolderImageLink;
     class Image;
     class FolderRoiLink;
     class Roi;
     class FolderAnnotationLink;
     class Annotation;
     class Details;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Folder> FolderChildFoldersSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::FolderImageLink> FolderImageLinksSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Image> FolderLinkedImageSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::FolderRoiLink> FolderRoiLinksSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Roi> FolderLinkedRoiSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::FolderAnnotationLink> FolderAnnotationLinksSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Annotation> FolderLinkedAnnotationSeq;
     ["protected"] class Folder
     extends omero::model::IObject
     {
       omero::RInt version;
       omero::RInt getVersion();
       void setVersion(omero::RInt theVersion);
       FolderChildFoldersSeq childFoldersSeq;
       bool childFoldersLoaded;
       /*
        * Unloads the childFolders collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfChildFolders() on how to test for unloaded collections.
        * See reloadChildFolders() on how to reset the value.
        *
        */
       void unloadChildFolders();
       int sizeOfChildFolders();
       FolderChildFoldersSeq copyChildFolders();
       // See language-specific iterator methods
       void addChildFolders(Folder target);
       /*
        * Adds all the members of the FolderChildFoldersSeq sequence to
        * the childFoldersSeq field.
        */
       void addAllChildFoldersSet(FolderChildFoldersSeq targets);
       void removeChildFolders(Folder theTarget);
       /*
        * Removes all the members of the FolderChildFoldersSeq sequence from
        * the childFoldersSeq field.
        */
       void removeAllChildFoldersSet(FolderChildFoldersSeq targets);
       void clearChildFolders();

       /*
        * Allows reloading the protected childFolders collection
        * from another instance of Folder. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadChildFolders(Folder toCopy);
       omero::model::Folder parentFolder;
       omero::model::Folder getParentFolder();
       void setParentFolder(omero::model::Folder theParentFolder);
       FolderImageLinksSeq imageLinksSeq;
       bool imageLinksLoaded;
       omero::sys::CountMap imageLinksCountPerOwner;
       /*
        * Unloads the imageLinks collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfImageLinks() on how to test for unloaded collections.
        * See reloadImageLinks() on how to reset the value.
        *
        */
       void unloadImageLinks();
       int sizeOfImageLinks();
       FolderImageLinksSeq copyImageLinks();
       // See language-specific iterator methods
       void addFolderImageLink(FolderImageLink target);
       /*
        * Adds all the members of the FolderImageLinksSeq sequence to
        * the imageLinksSeq field.
        */
       void addAllFolderImageLinkSet(FolderImageLinksSeq targets);
       void removeFolderImageLink(FolderImageLink theTarget);
       /*
        * Removes all the members of the FolderImageLinksSeq sequence from
        * the imageLinksSeq field.
        */
       void removeAllFolderImageLinkSet(FolderImageLinksSeq targets);
       void clearImageLinks();

       /*
        * Allows reloading the protected imageLinks collection
        * from another instance of Folder. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadImageLinks(Folder toCopy);
       omero::sys::CountMap getImageLinksCountPerOwner();
       FolderImageLink linkImage(Image addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addFolderImageLinkToBoth(omero::model::FolderImageLink link, bool bothSides);
       FolderImageLinksSeq findFolderImageLink(Image removal);
       void unlinkImage(Image removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removeFolderImageLinkFromBoth(omero::model::FolderImageLink link, bool bothSides);
       FolderLinkedImageSeq linkedImageList();
       FolderRoiLinksSeq roiLinksSeq;
       bool roiLinksLoaded;
       omero::sys::CountMap roiLinksCountPerOwner;
       /*
        * Unloads the roiLinks collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfRoiLinks() on how to test for unloaded collections.
        * See reloadRoiLinks() on how to reset the value.
        *
        */
       void unloadRoiLinks();
       int sizeOfRoiLinks();
       FolderRoiLinksSeq copyRoiLinks();
       // See language-specific iterator methods
       void addFolderRoiLink(FolderRoiLink target);
       /*
        * Adds all the members of the FolderRoiLinksSeq sequence to
        * the roiLinksSeq field.
        */
       void addAllFolderRoiLinkSet(FolderRoiLinksSeq targets);
       void removeFolderRoiLink(FolderRoiLink theTarget);
       /*
        * Removes all the members of the FolderRoiLinksSeq sequence from
        * the roiLinksSeq field.
        */
       void removeAllFolderRoiLinkSet(FolderRoiLinksSeq targets);
       void clearRoiLinks();

       /*
        * Allows reloading the protected roiLinks collection
        * from another instance of Folder. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadRoiLinks(Folder toCopy);
       omero::sys::CountMap getRoiLinksCountPerOwner();
       FolderRoiLink linkRoi(Roi addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addFolderRoiLinkToBoth(omero::model::FolderRoiLink link, bool bothSides);
       FolderRoiLinksSeq findFolderRoiLink(Roi removal);
       void unlinkRoi(Roi removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removeFolderRoiLinkFromBoth(omero::model::FolderRoiLink link, bool bothSides);
       FolderLinkedRoiSeq linkedRoiList();
       FolderAnnotationLinksSeq annotationLinksSeq;
       bool annotationLinksLoaded;
       omero::sys::CountMap annotationLinksCountPerOwner;
       /*
        * Unloads the annotationLinks collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfAnnotationLinks() on how to test for unloaded collections.
        * See reloadAnnotationLinks() on how to reset the value.
        *
        */
       void unloadAnnotationLinks();
       int sizeOfAnnotationLinks();
       FolderAnnotationLinksSeq copyAnnotationLinks();
       // See language-specific iterator methods
       void addFolderAnnotationLink(FolderAnnotationLink target);
       /*
        * Adds all the members of the FolderAnnotationLinksSeq sequence to
        * the annotationLinksSeq field.
        */
       void addAllFolderAnnotationLinkSet(FolderAnnotationLinksSeq targets);
       void removeFolderAnnotationLink(FolderAnnotationLink theTarget);
       /*
        * Removes all the members of the FolderAnnotationLinksSeq sequence from
        * the annotationLinksSeq field.
        */
       void removeAllFolderAnnotationLinkSet(FolderAnnotationLinksSeq targets);
       void clearAnnotationLinks();

       /*
        * Allows reloading the protected annotationLinks collection
        * from another instance of Folder. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadAnnotationLinks(Folder toCopy);
       omero::sys::CountMap getAnnotationLinksCountPerOwner();
       FolderAnnotationLink linkAnnotation(Annotation addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addFolderAnnotationLinkToBoth(omero::model::FolderAnnotationLink link, bool bothSides);
       FolderAnnotationLinksSeq findFolderAnnotationLink(Annotation removal);
       void unlinkAnnotation(Annotation removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removeFolderAnnotationLinkFromBoth(omero::model::FolderAnnotationLink link, bool bothSides);
       FolderLinkedAnnotationSeq linkedAnnotationList();
       omero::RString name;
       omero::RString getName();
       void setName(omero::RString theName);
       omero::RString description;
       omero::RString getDescription();
       void setDescription(omero::RString theDescription);
     };
   };
 };
 #endif // FOLDER_ICE
