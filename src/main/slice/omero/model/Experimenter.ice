    /*
    **   Generated by blitz/resources/templates/combined.vm
    **   See ../../README.ice for information on these types.
    **
    **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
    **   Use is subject to license terms supplied in LICENSE.txt
    **
    */
 #ifndef EXPERIMENTER_ICE
 #define EXPERIMENTER_ICE
 #include <omero/model/IObject.ice>
 #include <omero/RTypes.ice>
 #include <omero/model/RTypes.ice>
 #include <omero/System.ice>
 #include <omero/Collections.ice>
 module omero {
   module model {
     class GroupExperimenterMap;
     class ExperimenterGroup;
     class ExperimenterAnnotationLink;
     class Annotation;
     class Details;
     ["java:type:java.util.ArrayList"] sequence<omero::model::GroupExperimenterMap> ExperimenterGroupExperimenterMapSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::ExperimenterGroup> ExperimenterLinkedExperimenterGroupSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::ExperimenterAnnotationLink> ExperimenterAnnotationLinksSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Annotation> ExperimenterLinkedAnnotationSeq;
     ["protected"] class Experimenter
     extends omero::model::IObject
     {
       omero::RInt version;
       omero::RInt getVersion();
       void setVersion(omero::RInt theVersion);
       ExperimenterGroupExperimenterMapSeq groupExperimenterMapSeq;
       bool groupExperimenterMapLoaded;
       /*
        * Unloads the groupExperimenterMap collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfGroupExperimenterMap() on how to test for unloaded collections.
        * See reloadGroupExperimenterMap() on how to reset the value.
        *
        */
       void unloadGroupExperimenterMap();
       int sizeOfGroupExperimenterMap();
       ExperimenterGroupExperimenterMapSeq copyGroupExperimenterMap();
       // See language-specific iterator methods
       void addGroupExperimenterMap(GroupExperimenterMap target);
       /*
        * Adds all the members of the ExperimenterGroupExperimenterMapSeq sequence to
        * the groupExperimenterMapSeq field.
        */
       void addAllGroupExperimenterMapSet(ExperimenterGroupExperimenterMapSeq targets);
       void removeGroupExperimenterMap(GroupExperimenterMap theTarget);
       /*
        * Removes all the members of the ExperimenterGroupExperimenterMapSeq sequence from
        * the groupExperimenterMapSeq field.
        */
       void removeAllGroupExperimenterMapSet(ExperimenterGroupExperimenterMapSeq targets);
       void clearGroupExperimenterMap();

       /*
        * Allows reloading the protected groupExperimenterMap collection
        * from another instance of Experimenter. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadGroupExperimenterMap(Experimenter toCopy);
       GroupExperimenterMap getGroupExperimenterMap(int index);
       GroupExperimenterMap setGroupExperimenterMap(int index, GroupExperimenterMap theElement);
       GroupExperimenterMap getPrimaryGroupExperimenterMap();
       GroupExperimenterMap setPrimaryGroupExperimenterMap(GroupExperimenterMap theElement);
       GroupExperimenterMap linkExperimenterGroup(ExperimenterGroup addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addGroupExperimenterMapToBoth(omero::model::GroupExperimenterMap link, bool bothSides);
       ExperimenterGroupExperimenterMapSeq findGroupExperimenterMap(ExperimenterGroup removal);
       void unlinkExperimenterGroup(ExperimenterGroup removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removeGroupExperimenterMapFromBoth(omero::model::GroupExperimenterMap link, bool bothSides);
       ExperimenterLinkedExperimenterGroupSeq linkedExperimenterGroupList();
       omero::RString omeName;
       omero::RString getOmeName();
       void setOmeName(omero::RString theOmeName);
       omero::RString firstName;
       omero::RString getFirstName();
       void setFirstName(omero::RString theFirstName);
       omero::RString middleName;
       omero::RString getMiddleName();
       void setMiddleName(omero::RString theMiddleName);
       omero::RString lastName;
       omero::RString getLastName();
       void setLastName(omero::RString theLastName);
       omero::RString institution;
       omero::RString getInstitution();
       void setInstitution(omero::RString theInstitution);
       omero::RBool ldap;
       omero::RBool getLdap();
       void setLdap(omero::RBool theLdap);
       omero::RString email;
       omero::RString getEmail();
       void setEmail(omero::RString theEmail);
       omero::api::NamedValueList config;
       omero::api::StringStringMap getConfigAsMap();
       omero::api::NamedValueList getConfig();
       void setConfig(omero::api::NamedValueList theConfig);
       ExperimenterAnnotationLinksSeq annotationLinksSeq;
       bool annotationLinksLoaded;
       omero::sys::CountMap annotationLinksCountPerOwner;
       /*
        * Unloads the annotationLinks collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfAnnotationLinks() on how to test for unloaded collections.
        * See reloadAnnotationLinks() on how to reset the value.
        *
        */
       void unloadAnnotationLinks();
       int sizeOfAnnotationLinks();
       ExperimenterAnnotationLinksSeq copyAnnotationLinks();
       // See language-specific iterator methods
       void addExperimenterAnnotationLink(ExperimenterAnnotationLink target);
       /*
        * Adds all the members of the ExperimenterAnnotationLinksSeq sequence to
        * the annotationLinksSeq field.
        */
       void addAllExperimenterAnnotationLinkSet(ExperimenterAnnotationLinksSeq targets);
       void removeExperimenterAnnotationLink(ExperimenterAnnotationLink theTarget);
       /*
        * Removes all the members of the ExperimenterAnnotationLinksSeq sequence from
        * the annotationLinksSeq field.
        */
       void removeAllExperimenterAnnotationLinkSet(ExperimenterAnnotationLinksSeq targets);
       void clearAnnotationLinks();

       /*
        * Allows reloading the protected annotationLinks collection
        * from another instance of Experimenter. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadAnnotationLinks(Experimenter toCopy);
       omero::sys::CountMap getAnnotationLinksCountPerOwner();
       ExperimenterAnnotationLink linkAnnotation(Annotation addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addExperimenterAnnotationLinkToBoth(omero::model::ExperimenterAnnotationLink link, bool bothSides);
       ExperimenterAnnotationLinksSeq findExperimenterAnnotationLink(Annotation removal);
       void unlinkAnnotation(Annotation removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removeExperimenterAnnotationLinkFromBoth(omero::model::ExperimenterAnnotationLink link, bool bothSides);
       ExperimenterLinkedAnnotationSeq linkedAnnotationList();
     };
   };
 };
 #endif // EXPERIMENTER_ICE
