    /*
    **   Generated by blitz/resources/templates/combined.vm
    **   See ../../README.ice for information on these types.
    **
    **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
    **   Use is subject to license terms supplied in LICENSE.txt
    **
    */
 #ifndef RENDERINGDEF_ICE
 #define RENDERINGDEF_ICE
 #include <omero/model/IObject.ice>
 #include <omero/RTypes.ice>
 #include <omero/model/RTypes.ice>
 #include <omero/System.ice>
 #include <omero/Collections.ice>
 module omero {
   module model {
     class Pixels;
     class RenderingModel;
     class ChannelBinding;
     class QuantumDef;
     class ProjectionDef;
     class Details;
     ["java:type:java.util.ArrayList"] sequence<omero::model::ChannelBinding> RenderingDefWaveRenderingSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::ProjectionDef> RenderingDefProjectionsSeq;
     ["protected"] class RenderingDef
     extends omero::model::IObject
     {
       omero::RInt version;
       omero::RInt getVersion();
       void setVersion(omero::RInt theVersion);
       omero::model::Pixels pixels;
       omero::model::Pixels getPixels();
       void setPixels(omero::model::Pixels thePixels);
       omero::RInt defaultZ;
       omero::RInt getDefaultZ();
       void setDefaultZ(omero::RInt theDefaultZ);
       omero::RInt defaultT;
       omero::RInt getDefaultT();
       void setDefaultT(omero::RInt theDefaultT);
       omero::model::RenderingModel model;
       omero::model::RenderingModel getModel();
       void setModel(omero::model::RenderingModel theModel);
       RenderingDefWaveRenderingSeq waveRenderingSeq;
       bool waveRenderingLoaded;
       /*
        * Unloads the waveRendering collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfWaveRendering() on how to test for unloaded collections.
        * See reloadWaveRendering() on how to reset the value.
        *
        */
       void unloadWaveRendering();
       int sizeOfWaveRendering();
       RenderingDefWaveRenderingSeq copyWaveRendering();
       // See language-specific iterator methods
       void addChannelBinding(ChannelBinding target);
       /*
        * Adds all the members of the RenderingDefWaveRenderingSeq sequence to
        * the waveRenderingSeq field.
        */
       void addAllChannelBindingSet(RenderingDefWaveRenderingSeq targets);
       void removeChannelBinding(ChannelBinding theTarget);
       /*
        * Removes all the members of the RenderingDefWaveRenderingSeq sequence from
        * the waveRenderingSeq field.
        */
       void removeAllChannelBindingSet(RenderingDefWaveRenderingSeq targets);
       void clearWaveRendering();

       /*
        * Allows reloading the protected waveRendering collection
        * from another instance of RenderingDef. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadWaveRendering(RenderingDef toCopy);
       ChannelBinding getChannelBinding(int index);
       ChannelBinding setChannelBinding(int index, ChannelBinding theElement);
       ChannelBinding getPrimaryChannelBinding();
       ChannelBinding setPrimaryChannelBinding(ChannelBinding theElement);
       omero::RString name;
       omero::RString getName();
       void setName(omero::RString theName);
       omero::RDouble compression;
       omero::RDouble getCompression();
       void setCompression(omero::RDouble theCompression);
       omero::model::QuantumDef quantization;
       omero::model::QuantumDef getQuantization();
       void setQuantization(omero::model::QuantumDef theQuantization);
       RenderingDefProjectionsSeq projectionsSeq;
       bool projectionsLoaded;
       /*
        * Unloads the projections collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfProjections() on how to test for unloaded collections.
        * See reloadProjections() on how to reset the value.
        *
        */
       void unloadProjections();
       int sizeOfProjections();
       RenderingDefProjectionsSeq copyProjections();
       // See language-specific iterator methods
       void addProjectionDef(ProjectionDef target);
       /*
        * Adds all the members of the RenderingDefProjectionsSeq sequence to
        * the projectionsSeq field.
        */
       void addAllProjectionDefSet(RenderingDefProjectionsSeq targets);
       void removeProjectionDef(ProjectionDef theTarget);
       /*
        * Removes all the members of the RenderingDefProjectionsSeq sequence from
        * the projectionsSeq field.
        */
       void removeAllProjectionDefSet(RenderingDefProjectionsSeq targets);
       void clearProjections();

       /*
        * Allows reloading the protected projections collection
        * from another instance of RenderingDef. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadProjections(RenderingDef toCopy);
       ProjectionDef getProjectionDef(int index);
       ProjectionDef setProjectionDef(int index, ProjectionDef theElement);
       ProjectionDef getPrimaryProjectionDef();
       ProjectionDef setPrimaryProjectionDef(ProjectionDef theElement);
     };
   };
 };
 #endif // RENDERINGDEF_ICE
