    /*
    **   Generated by blitz/resources/templates/combined.vm
    **   See ../../README.ice for information on these types.
    **
    **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
    **   Use is subject to license terms supplied in LICENSE.txt
    **
    */
 #ifndef CHANNELBINDING_ICE
 #define CHANNELBINDING_ICE
 #include <omero/model/IObject.ice>
 #include <omero/RTypes.ice>
 #include <omero/model/RTypes.ice>
 #include <omero/System.ice>
 #include <omero/Collections.ice>
 module omero {
   module model {
     class RenderingDef;
     class Family;
     class CodomainMapContext;
     class Details;
     ["java:type:java.util.ArrayList"] sequence<omero::model::CodomainMapContext> ChannelBindingSpatialDomainEnhancementSeq;
     ["protected"] class ChannelBinding
     extends omero::model::IObject
     {
       omero::RInt version;
       omero::RInt getVersion();
       void setVersion(omero::RInt theVersion);
       omero::model::RenderingDef renderingDef;
       omero::model::RenderingDef getRenderingDef();
       void setRenderingDef(omero::model::RenderingDef theRenderingDef);
       omero::model::Family family;
       omero::model::Family getFamily();
       void setFamily(omero::model::Family theFamily);
       omero::RDouble coefficient;
       omero::RDouble getCoefficient();
       void setCoefficient(omero::RDouble theCoefficient);
       omero::RDouble inputStart;
       omero::RDouble getInputStart();
       void setInputStart(omero::RDouble theInputStart);
       omero::RDouble inputEnd;
       omero::RDouble getInputEnd();
       void setInputEnd(omero::RDouble theInputEnd);
       omero::RBool active;
       omero::RBool getActive();
       void setActive(omero::RBool theActive);
       omero::RBool noiseReduction;
       omero::RBool getNoiseReduction();
       void setNoiseReduction(omero::RBool theNoiseReduction);
       omero::RInt red;
       omero::RInt getRed();
       void setRed(omero::RInt theRed);
       omero::RInt green;
       omero::RInt getGreen();
       void setGreen(omero::RInt theGreen);
       omero::RInt blue;
       omero::RInt getBlue();
       void setBlue(omero::RInt theBlue);
       omero::RInt alpha;
       omero::RInt getAlpha();
       void setAlpha(omero::RInt theAlpha);
       omero::RString lookupTable;
       omero::RString getLookupTable();
       void setLookupTable(omero::RString theLookupTable);
       ChannelBindingSpatialDomainEnhancementSeq spatialDomainEnhancementSeq;
       bool spatialDomainEnhancementLoaded;
       /*
        * Unloads the spatialDomainEnhancement collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfSpatialDomainEnhancement() on how to test for unloaded collections.
        * See reloadSpatialDomainEnhancement() on how to reset the value.
        *
        */
       void unloadSpatialDomainEnhancement();
       int sizeOfSpatialDomainEnhancement();
       ChannelBindingSpatialDomainEnhancementSeq copySpatialDomainEnhancement();
       // See language-specific iterator methods
       void addCodomainMapContext(CodomainMapContext target);
       /*
        * Adds all the members of the ChannelBindingSpatialDomainEnhancementSeq sequence to
        * the spatialDomainEnhancementSeq field.
        */
       void addAllCodomainMapContextSet(ChannelBindingSpatialDomainEnhancementSeq targets);
       void removeCodomainMapContext(CodomainMapContext theTarget);
       /*
        * Removes all the members of the ChannelBindingSpatialDomainEnhancementSeq sequence from
        * the spatialDomainEnhancementSeq field.
        */
       void removeAllCodomainMapContextSet(ChannelBindingSpatialDomainEnhancementSeq targets);
       void clearSpatialDomainEnhancement();

       /*
        * Allows reloading the protected spatialDomainEnhancement collection
        * from another instance of ChannelBinding. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadSpatialDomainEnhancement(ChannelBinding toCopy);
       CodomainMapContext getCodomainMapContext(int index);
       CodomainMapContext setCodomainMapContext(int index, CodomainMapContext theElement);
       CodomainMapContext getPrimaryCodomainMapContext();
       CodomainMapContext setPrimaryCodomainMapContext(CodomainMapContext theElement);
     };
   };
 };
 #endif // CHANNELBINDING_ICE
