    /*
    **   Generated by blitz/resources/templates/combined.vm
    **   See ../../README.ice for information on these types.
    **
    **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
    **   Use is subject to license terms supplied in LICENSE.txt
    **
    */
 #ifndef PIXELS_ICE
 #define PIXELS_ICE
 #include <omero/model/IObject.ice>
 #include <omero/RTypes.ice>
 #include <omero/model/RTypes.ice>
 #include <omero/System.ice>
 #include <omero/Collections.ice>
 module omero {
   module model {
     class Image;
     class Pixels;
     class PixelsType;
     class DimensionOrder;
     class Length;
     class Length;
     class Length;
     class Time;
     class PlaneInfo;
     class PixelsOriginalFileMap;
     class OriginalFile;
     class Channel;
     class RenderingDef;
     class Thumbnail;
     class Details;
     ["java:type:java.util.ArrayList"] sequence<omero::model::PlaneInfo> PixelsPlaneInfoSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::PixelsOriginalFileMap> PixelsPixelsFileMapsSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::OriginalFile> PixelsLinkedOriginalFileSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Channel> PixelsChannelsSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::RenderingDef> PixelsSettingsSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Thumbnail> PixelsThumbnailsSeq;
     ["protected"] class Pixels
     extends omero::model::IObject
     {
       omero::RInt version;
       omero::RInt getVersion();
       void setVersion(omero::RInt theVersion);
       omero::model::Image image;
       omero::model::Image getImage();
       void setImage(omero::model::Image theImage);
       omero::model::Pixels relatedTo;
       omero::model::Pixels getRelatedTo();
       void setRelatedTo(omero::model::Pixels theRelatedTo);
       omero::model::PixelsType pixelsType;
       omero::model::PixelsType getPixelsType();
       void setPixelsType(omero::model::PixelsType thePixelsType);
       omero::RInt significantBits;
       omero::RInt getSignificantBits();
       void setSignificantBits(omero::RInt theSignificantBits);
       omero::RInt sizeX;
       omero::RInt getSizeX();
       void setSizeX(omero::RInt theSizeX);
       omero::RInt sizeY;
       omero::RInt getSizeY();
       void setSizeY(omero::RInt theSizeY);
       omero::RInt sizeZ;
       omero::RInt getSizeZ();
       void setSizeZ(omero::RInt theSizeZ);
       omero::RInt sizeC;
       omero::RInt getSizeC();
       void setSizeC(omero::RInt theSizeC);
       omero::RInt sizeT;
       omero::RInt getSizeT();
       void setSizeT(omero::RInt theSizeT);
       omero::RString sha1;
       omero::RString getSha1();
       void setSha1(omero::RString theSha1);
       omero::model::DimensionOrder dimensionOrder;
       omero::model::DimensionOrder getDimensionOrder();
       void setDimensionOrder(omero::model::DimensionOrder theDimensionOrder);
       omero::model::Length physicalSizeX;
       omero::model::Length getPhysicalSizeX();
       void setPhysicalSizeX(omero::model::Length thePhysicalSizeX);
       omero::model::Length physicalSizeY;
       omero::model::Length getPhysicalSizeY();
       void setPhysicalSizeY(omero::model::Length thePhysicalSizeY);
       omero::model::Length physicalSizeZ;
       omero::model::Length getPhysicalSizeZ();
       void setPhysicalSizeZ(omero::model::Length thePhysicalSizeZ);
       omero::RInt waveStart;
       omero::RInt getWaveStart();
       void setWaveStart(omero::RInt theWaveStart);
       omero::RInt waveIncrement;
       omero::RInt getWaveIncrement();
       void setWaveIncrement(omero::RInt theWaveIncrement);
       omero::model::Time timeIncrement;
       omero::model::Time getTimeIncrement();
       void setTimeIncrement(omero::model::Time theTimeIncrement);
       omero::RString methodology;
       omero::RString getMethodology();
       void setMethodology(omero::RString theMethodology);
       PixelsPlaneInfoSeq planeInfoSeq;
       bool planeInfoLoaded;
       /*
        * Unloads the planeInfo collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfPlaneInfo() on how to test for unloaded collections.
        * See reloadPlaneInfo() on how to reset the value.
        *
        */
       void unloadPlaneInfo();
       int sizeOfPlaneInfo();
       PixelsPlaneInfoSeq copyPlaneInfo();
       // See language-specific iterator methods
       void addPlaneInfo(PlaneInfo target);
       /*
        * Adds all the members of the PixelsPlaneInfoSeq sequence to
        * the planeInfoSeq field.
        */
       void addAllPlaneInfoSet(PixelsPlaneInfoSeq targets);
       void removePlaneInfo(PlaneInfo theTarget);
       /*
        * Removes all the members of the PixelsPlaneInfoSeq sequence from
        * the planeInfoSeq field.
        */
       void removeAllPlaneInfoSet(PixelsPlaneInfoSeq targets);
       void clearPlaneInfo();

       /*
        * Allows reloading the protected planeInfo collection
        * from another instance of Pixels. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadPlaneInfo(Pixels toCopy);
       PixelsPixelsFileMapsSeq pixelsFileMapsSeq;
       bool pixelsFileMapsLoaded;
       omero::sys::CountMap pixelsFileMapsCountPerOwner;
       /*
        * Unloads the pixelsFileMaps collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfPixelsFileMaps() on how to test for unloaded collections.
        * See reloadPixelsFileMaps() on how to reset the value.
        *
        */
       void unloadPixelsFileMaps();
       int sizeOfPixelsFileMaps();
       PixelsPixelsFileMapsSeq copyPixelsFileMaps();
       // See language-specific iterator methods
       void addPixelsOriginalFileMap(PixelsOriginalFileMap target);
       /*
        * Adds all the members of the PixelsPixelsFileMapsSeq sequence to
        * the pixelsFileMapsSeq field.
        */
       void addAllPixelsOriginalFileMapSet(PixelsPixelsFileMapsSeq targets);
       void removePixelsOriginalFileMap(PixelsOriginalFileMap theTarget);
       /*
        * Removes all the members of the PixelsPixelsFileMapsSeq sequence from
        * the pixelsFileMapsSeq field.
        */
       void removeAllPixelsOriginalFileMapSet(PixelsPixelsFileMapsSeq targets);
       void clearPixelsFileMaps();

       /*
        * Allows reloading the protected pixelsFileMaps collection
        * from another instance of Pixels. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadPixelsFileMaps(Pixels toCopy);
       omero::sys::CountMap getPixelsFileMapsCountPerOwner();
       PixelsOriginalFileMap linkOriginalFile(OriginalFile addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addPixelsOriginalFileMapToBoth(omero::model::PixelsOriginalFileMap link, bool bothSides);
       PixelsPixelsFileMapsSeq findPixelsOriginalFileMap(OriginalFile removal);
       void unlinkOriginalFile(OriginalFile removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removePixelsOriginalFileMapFromBoth(omero::model::PixelsOriginalFileMap link, bool bothSides);
       PixelsLinkedOriginalFileSeq linkedOriginalFileList();
       PixelsChannelsSeq channelsSeq;
       bool channelsLoaded;
       /*
        * Unloads the channels collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfChannels() on how to test for unloaded collections.
        * See reloadChannels() on how to reset the value.
        *
        */
       void unloadChannels();
       int sizeOfChannels();
       PixelsChannelsSeq copyChannels();
       // See language-specific iterator methods
       void addChannel(Channel target);
       /*
        * Adds all the members of the PixelsChannelsSeq sequence to
        * the channelsSeq field.
        */
       void addAllChannelSet(PixelsChannelsSeq targets);
       void removeChannel(Channel theTarget);
       /*
        * Removes all the members of the PixelsChannelsSeq sequence from
        * the channelsSeq field.
        */
       void removeAllChannelSet(PixelsChannelsSeq targets);
       void clearChannels();

       /*
        * Allows reloading the protected channels collection
        * from another instance of Pixels. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadChannels(Pixels toCopy);
       Channel getChannel(int index);
       Channel setChannel(int index, Channel theElement);
       Channel getPrimaryChannel();
       Channel setPrimaryChannel(Channel theElement);
       PixelsSettingsSeq settingsSeq;
       bool settingsLoaded;
       /*
        * Unloads the settings collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfSettings() on how to test for unloaded collections.
        * See reloadSettings() on how to reset the value.
        *
        */
       void unloadSettings();
       int sizeOfSettings();
       PixelsSettingsSeq copySettings();
       // See language-specific iterator methods
       void addRenderingDef(RenderingDef target);
       /*
        * Adds all the members of the PixelsSettingsSeq sequence to
        * the settingsSeq field.
        */
       void addAllRenderingDefSet(PixelsSettingsSeq targets);
       void removeRenderingDef(RenderingDef theTarget);
       /*
        * Removes all the members of the PixelsSettingsSeq sequence from
        * the settingsSeq field.
        */
       void removeAllRenderingDefSet(PixelsSettingsSeq targets);
       void clearSettings();

       /*
        * Allows reloading the protected settings collection
        * from another instance of Pixels. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadSettings(Pixels toCopy);
       PixelsThumbnailsSeq thumbnailsSeq;
       bool thumbnailsLoaded;
       /*
        * Unloads the thumbnails collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfThumbnails() on how to test for unloaded collections.
        * See reloadThumbnails() on how to reset the value.
        *
        */
       void unloadThumbnails();
       int sizeOfThumbnails();
       PixelsThumbnailsSeq copyThumbnails();
       // See language-specific iterator methods
       void addThumbnail(Thumbnail target);
       /*
        * Adds all the members of the PixelsThumbnailsSeq sequence to
        * the thumbnailsSeq field.
        */
       void addAllThumbnailSet(PixelsThumbnailsSeq targets);
       void removeThumbnail(Thumbnail theTarget);
       /*
        * Removes all the members of the PixelsThumbnailsSeq sequence from
        * the thumbnailsSeq field.
        */
       void removeAllThumbnailSet(PixelsThumbnailsSeq targets);
       void clearThumbnails();

       /*
        * Allows reloading the protected thumbnails collection
        * from another instance of Pixels. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadThumbnails(Pixels toCopy);
     };
   };
 };
 #endif // PIXELS_ICE
