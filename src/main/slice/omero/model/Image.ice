    /*
    **   Generated by blitz/resources/templates/combined.vm
    **   See ../../README.ice for information on these types.
    **
    **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
    **   Use is subject to license terms supplied in LICENSE.txt
    **
    */
 #ifndef IMAGE_ICE
 #define IMAGE_ICE
 #include <omero/model/IObject.ice>
 #include <omero/RTypes.ice>
 #include <omero/model/RTypes.ice>
 #include <omero/System.ice>
 #include <omero/Collections.ice>
 module omero {
   module model {
     class Format;
     class ImagingEnvironment;
     class ObjectiveSettings;
     class Instrument;
     class StageLabel;
     class Experiment;
     class Pixels;
     class WellSample;
     class Roi;
     class DatasetImageLink;
     class Dataset;
     class FolderImageLink;
     class Folder;
     class Fileset;
     class ImageAnnotationLink;
     class Annotation;
     class Details;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Pixels> ImagePixelsSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::WellSample> ImageWellSamplesSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Roi> ImageRoisSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::DatasetImageLink> ImageDatasetLinksSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Dataset> ImageLinkedDatasetSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::FolderImageLink> ImageFolderLinksSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Folder> ImageLinkedFolderSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::ImageAnnotationLink> ImageAnnotationLinksSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Annotation> ImageLinkedAnnotationSeq;
     ["protected"] class Image
     extends omero::model::IObject
     {
       omero::RInt version;
       omero::RInt getVersion();
       void setVersion(omero::RInt theVersion);
       omero::RInt series;
       omero::RInt getSeries();
       void setSeries(omero::RInt theSeries);
       omero::RTime acquisitionDate;
       omero::RTime getAcquisitionDate();
       void setAcquisitionDate(omero::RTime theAcquisitionDate);
       omero::RBool archived;
       omero::RBool getArchived();
       void setArchived(omero::RBool theArchived);
       omero::RBool partial;
       omero::RBool getPartial();
       void setPartial(omero::RBool thePartial);
       omero::model::Format format;
       omero::model::Format getFormat();
       void setFormat(omero::model::Format theFormat);
       omero::model::ImagingEnvironment imagingEnvironment;
       omero::model::ImagingEnvironment getImagingEnvironment();
       void setImagingEnvironment(omero::model::ImagingEnvironment theImagingEnvironment);
       omero::model::ObjectiveSettings objectiveSettings;
       omero::model::ObjectiveSettings getObjectiveSettings();
       void setObjectiveSettings(omero::model::ObjectiveSettings theObjectiveSettings);
       omero::model::Instrument instrument;
       omero::model::Instrument getInstrument();
       void setInstrument(omero::model::Instrument theInstrument);
       omero::model::StageLabel stageLabel;
       omero::model::StageLabel getStageLabel();
       void setStageLabel(omero::model::StageLabel theStageLabel);
       omero::model::Experiment experiment;
       omero::model::Experiment getExperiment();
       void setExperiment(omero::model::Experiment theExperiment);
       ImagePixelsSeq pixelsSeq;
       bool pixelsLoaded;
       /*
        * Unloads the pixels collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfPixels() on how to test for unloaded collections.
        * See reloadPixels() on how to reset the value.
        *
        */
       void unloadPixels();
       int sizeOfPixels();
       ImagePixelsSeq copyPixels();
       // See language-specific iterator methods
       void addPixels(Pixels target);
       /*
        * Adds all the members of the ImagePixelsSeq sequence to
        * the pixelsSeq field.
        */
       void addAllPixelsSet(ImagePixelsSeq targets);
       void removePixels(Pixels theTarget);
       /*
        * Removes all the members of the ImagePixelsSeq sequence from
        * the pixelsSeq field.
        */
       void removeAllPixelsSet(ImagePixelsSeq targets);
       void clearPixels();

       /*
        * Allows reloading the protected pixels collection
        * from another instance of Image. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadPixels(Image toCopy);
       Pixels getPixels(int index);
       Pixels setPixels(int index, Pixels theElement);
       Pixels getPrimaryPixels();
       Pixels setPrimaryPixels(Pixels theElement);
       ImageWellSamplesSeq wellSamplesSeq;
       bool wellSamplesLoaded;
       /*
        * Unloads the wellSamples collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfWellSamples() on how to test for unloaded collections.
        * See reloadWellSamples() on how to reset the value.
        *
        */
       void unloadWellSamples();
       int sizeOfWellSamples();
       ImageWellSamplesSeq copyWellSamples();
       // See language-specific iterator methods
       void addWellSample(WellSample target);
       /*
        * Adds all the members of the ImageWellSamplesSeq sequence to
        * the wellSamplesSeq field.
        */
       void addAllWellSampleSet(ImageWellSamplesSeq targets);
       void removeWellSample(WellSample theTarget);
       /*
        * Removes all the members of the ImageWellSamplesSeq sequence from
        * the wellSamplesSeq field.
        */
       void removeAllWellSampleSet(ImageWellSamplesSeq targets);
       void clearWellSamples();

       /*
        * Allows reloading the protected wellSamples collection
        * from another instance of Image. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadWellSamples(Image toCopy);
       ImageRoisSeq roisSeq;
       bool roisLoaded;
       /*
        * Unloads the rois collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfRois() on how to test for unloaded collections.
        * See reloadRois() on how to reset the value.
        *
        */
       void unloadRois();
       int sizeOfRois();
       ImageRoisSeq copyRois();
       // See language-specific iterator methods
       void addRoi(Roi target);
       /*
        * Adds all the members of the ImageRoisSeq sequence to
        * the roisSeq field.
        */
       void addAllRoiSet(ImageRoisSeq targets);
       void removeRoi(Roi theTarget);
       /*
        * Removes all the members of the ImageRoisSeq sequence from
        * the roisSeq field.
        */
       void removeAllRoiSet(ImageRoisSeq targets);
       void clearRois();

       /*
        * Allows reloading the protected rois collection
        * from another instance of Image. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadRois(Image toCopy);
       ImageDatasetLinksSeq datasetLinksSeq;
       bool datasetLinksLoaded;
       omero::sys::CountMap datasetLinksCountPerOwner;
       /*
        * Unloads the datasetLinks collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfDatasetLinks() on how to test for unloaded collections.
        * See reloadDatasetLinks() on how to reset the value.
        *
        */
       void unloadDatasetLinks();
       int sizeOfDatasetLinks();
       ImageDatasetLinksSeq copyDatasetLinks();
       // See language-specific iterator methods
       void addDatasetImageLink(DatasetImageLink target);
       /*
        * Adds all the members of the ImageDatasetLinksSeq sequence to
        * the datasetLinksSeq field.
        */
       void addAllDatasetImageLinkSet(ImageDatasetLinksSeq targets);
       void removeDatasetImageLink(DatasetImageLink theTarget);
       /*
        * Removes all the members of the ImageDatasetLinksSeq sequence from
        * the datasetLinksSeq field.
        */
       void removeAllDatasetImageLinkSet(ImageDatasetLinksSeq targets);
       void clearDatasetLinks();

       /*
        * Allows reloading the protected datasetLinks collection
        * from another instance of Image. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadDatasetLinks(Image toCopy);
       omero::sys::CountMap getDatasetLinksCountPerOwner();
       DatasetImageLink linkDataset(Dataset addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addDatasetImageLinkToBoth(omero::model::DatasetImageLink link, bool bothSides);
       ImageDatasetLinksSeq findDatasetImageLink(Dataset removal);
       void unlinkDataset(Dataset removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removeDatasetImageLinkFromBoth(omero::model::DatasetImageLink link, bool bothSides);
       ImageLinkedDatasetSeq linkedDatasetList();
       ImageFolderLinksSeq folderLinksSeq;
       bool folderLinksLoaded;
       omero::sys::CountMap folderLinksCountPerOwner;
       /*
        * Unloads the folderLinks collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfFolderLinks() on how to test for unloaded collections.
        * See reloadFolderLinks() on how to reset the value.
        *
        */
       void unloadFolderLinks();
       int sizeOfFolderLinks();
       ImageFolderLinksSeq copyFolderLinks();
       // See language-specific iterator methods
       void addFolderImageLink(FolderImageLink target);
       /*
        * Adds all the members of the ImageFolderLinksSeq sequence to
        * the folderLinksSeq field.
        */
       void addAllFolderImageLinkSet(ImageFolderLinksSeq targets);
       void removeFolderImageLink(FolderImageLink theTarget);
       /*
        * Removes all the members of the ImageFolderLinksSeq sequence from
        * the folderLinksSeq field.
        */
       void removeAllFolderImageLinkSet(ImageFolderLinksSeq targets);
       void clearFolderLinks();

       /*
        * Allows reloading the protected folderLinks collection
        * from another instance of Image. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadFolderLinks(Image toCopy);
       omero::sys::CountMap getFolderLinksCountPerOwner();
       FolderImageLink linkFolder(Folder addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addFolderImageLinkToBoth(omero::model::FolderImageLink link, bool bothSides);
       ImageFolderLinksSeq findFolderImageLink(Folder removal);
       void unlinkFolder(Folder removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removeFolderImageLinkFromBoth(omero::model::FolderImageLink link, bool bothSides);
       ImageLinkedFolderSeq linkedFolderList();
       omero::model::Fileset fileset;
       omero::model::Fileset getFileset();
       void setFileset(omero::model::Fileset theFileset);
       ImageAnnotationLinksSeq annotationLinksSeq;
       bool annotationLinksLoaded;
       omero::sys::CountMap annotationLinksCountPerOwner;
       /*
        * Unloads the annotationLinks collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfAnnotationLinks() on how to test for unloaded collections.
        * See reloadAnnotationLinks() on how to reset the value.
        *
        */
       void unloadAnnotationLinks();
       int sizeOfAnnotationLinks();
       ImageAnnotationLinksSeq copyAnnotationLinks();
       // See language-specific iterator methods
       void addImageAnnotationLink(ImageAnnotationLink target);
       /*
        * Adds all the members of the ImageAnnotationLinksSeq sequence to
        * the annotationLinksSeq field.
        */
       void addAllImageAnnotationLinkSet(ImageAnnotationLinksSeq targets);
       void removeImageAnnotationLink(ImageAnnotationLink theTarget);
       /*
        * Removes all the members of the ImageAnnotationLinksSeq sequence from
        * the annotationLinksSeq field.
        */
       void removeAllImageAnnotationLinkSet(ImageAnnotationLinksSeq targets);
       void clearAnnotationLinks();

       /*
        * Allows reloading the protected annotationLinks collection
        * from another instance of Image. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadAnnotationLinks(Image toCopy);
       omero::sys::CountMap getAnnotationLinksCountPerOwner();
       ImageAnnotationLink linkAnnotation(Annotation addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addImageAnnotationLinkToBoth(omero::model::ImageAnnotationLink link, bool bothSides);
       ImageAnnotationLinksSeq findImageAnnotationLink(Annotation removal);
       void unlinkAnnotation(Annotation removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removeImageAnnotationLinkFromBoth(omero::model::ImageAnnotationLink link, bool bothSides);
       ImageLinkedAnnotationSeq linkedAnnotationList();
       omero::RString name;
       omero::RString getName();
       void setName(omero::RString theName);
       omero::RString description;
       omero::RString getDescription();
       void setDescription(omero::RString theDescription);
     };
   };
 };
 #endif // IMAGE_ICE
