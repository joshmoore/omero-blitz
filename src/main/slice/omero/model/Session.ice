    /*
    **   Generated by blitz/resources/templates/combined.vm
    **   See ../../README.ice for information on these types.
    **
    **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
    **   Use is subject to license terms supplied in LICENSE.txt
    **
    */
 #ifndef SESSION_ICE
 #define SESSION_ICE
 #include <omero/model/IObject.ice>
 #include <omero/RTypes.ice>
 #include <omero/model/RTypes.ice>
 #include <omero/System.ice>
 #include <omero/Collections.ice>
 module omero {
   module model {
     class Node;
     class Experimenter;
     class Experimenter;
     class Event;
     class SessionAnnotationLink;
     class Annotation;
     class Details;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Event> SessionEventsSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::SessionAnnotationLink> SessionAnnotationLinksSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Annotation> SessionLinkedAnnotationSeq;
     ["protected"] class Session
     extends omero::model::IObject
     {
       omero::RInt version;
       omero::RInt getVersion();
       void setVersion(omero::RInt theVersion);
       omero::model::Node node;
       omero::model::Node getNode();
       void setNode(omero::model::Node theNode);
       omero::RString uuid;
       omero::RString getUuid();
       void setUuid(omero::RString theUuid);
       omero::model::Experimenter owner;
       omero::model::Experimenter getOwner();
       void setOwner(omero::model::Experimenter theOwner);
       omero::model::Experimenter sudoer;
       omero::model::Experimenter getSudoer();
       void setSudoer(omero::model::Experimenter theSudoer);
       omero::RLong timeToIdle;
       omero::RLong getTimeToIdle();
       void setTimeToIdle(omero::RLong theTimeToIdle);
       omero::RLong timeToLive;
       omero::RLong getTimeToLive();
       void setTimeToLive(omero::RLong theTimeToLive);
       omero::RTime started;
       omero::RTime getStarted();
       void setStarted(omero::RTime theStarted);
       omero::RTime closed;
       omero::RTime getClosed();
       void setClosed(omero::RTime theClosed);
       omero::RString message;
       omero::RString getMessage();
       void setMessage(omero::RString theMessage);
       omero::RString defaultEventType;
       omero::RString getDefaultEventType();
       void setDefaultEventType(omero::RString theDefaultEventType);
       omero::RString userAgent;
       omero::RString getUserAgent();
       void setUserAgent(omero::RString theUserAgent);
       omero::RString userIP;
       omero::RString getUserIP();
       void setUserIP(omero::RString theUserIP);
       SessionEventsSeq eventsSeq;
       bool eventsLoaded;
       /*
        * Unloads the events collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfEvents() on how to test for unloaded collections.
        * See reloadEvents() on how to reset the value.
        *
        */
       void unloadEvents();
       int sizeOfEvents();
       SessionEventsSeq copyEvents();
       // See language-specific iterator methods
       void addEvent(Event target);
       /*
        * Adds all the members of the SessionEventsSeq sequence to
        * the eventsSeq field.
        */
       void addAllEventSet(SessionEventsSeq targets);
       void removeEvent(Event theTarget);
       /*
        * Removes all the members of the SessionEventsSeq sequence from
        * the eventsSeq field.
        */
       void removeAllEventSet(SessionEventsSeq targets);
       void clearEvents();

       /*
        * Allows reloading the protected events collection
        * from another instance of Session. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadEvents(Session toCopy);
       SessionAnnotationLinksSeq annotationLinksSeq;
       bool annotationLinksLoaded;
       omero::sys::CountMap annotationLinksCountPerOwner;
       /*
        * Unloads the annotationLinks collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfAnnotationLinks() on how to test for unloaded collections.
        * See reloadAnnotationLinks() on how to reset the value.
        *
        */
       void unloadAnnotationLinks();
       int sizeOfAnnotationLinks();
       SessionAnnotationLinksSeq copyAnnotationLinks();
       // See language-specific iterator methods
       void addSessionAnnotationLink(SessionAnnotationLink target);
       /*
        * Adds all the members of the SessionAnnotationLinksSeq sequence to
        * the annotationLinksSeq field.
        */
       void addAllSessionAnnotationLinkSet(SessionAnnotationLinksSeq targets);
       void removeSessionAnnotationLink(SessionAnnotationLink theTarget);
       /*
        * Removes all the members of the SessionAnnotationLinksSeq sequence from
        * the annotationLinksSeq field.
        */
       void removeAllSessionAnnotationLinkSet(SessionAnnotationLinksSeq targets);
       void clearAnnotationLinks();

       /*
        * Allows reloading the protected annotationLinks collection
        * from another instance of Session. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadAnnotationLinks(Session toCopy);
       omero::sys::CountMap getAnnotationLinksCountPerOwner();
       SessionAnnotationLink linkAnnotation(Annotation addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addSessionAnnotationLinkToBoth(omero::model::SessionAnnotationLink link, bool bothSides);
       SessionAnnotationLinksSeq findSessionAnnotationLink(Annotation removal);
       void unlinkAnnotation(Annotation removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removeSessionAnnotationLinkFromBoth(omero::model::SessionAnnotationLink link, bool bothSides);
       SessionLinkedAnnotationSeq linkedAnnotationList();
     };
   };
 };
 #endif // SESSION_ICE
