    /*
    **   Generated by blitz/resources/templates/combined.vm
    **   See ../../README.ice for information on these types.
    **
    **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
    **   Use is subject to license terms supplied in LICENSE.txt
    **
    */
 #ifndef CHANNEL_ICE
 #define CHANNEL_ICE
 #include <omero/model/IObject.ice>
 #include <omero/RTypes.ice>
 #include <omero/model/RTypes.ice>
 #include <omero/System.ice>
 #include <omero/Collections.ice>
 module omero {
   module model {
     class StatsInfo;
     class LogicalChannel;
     class Pixels;
     class ChannelAnnotationLink;
     class Annotation;
     class Details;
     ["java:type:java.util.ArrayList"] sequence<omero::model::ChannelAnnotationLink> ChannelAnnotationLinksSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Annotation> ChannelLinkedAnnotationSeq;
     ["protected"] class Channel
     extends omero::model::IObject
     {
       omero::RInt version;
       omero::RInt getVersion();
       void setVersion(omero::RInt theVersion);
       omero::model::StatsInfo statsInfo;
       omero::model::StatsInfo getStatsInfo();
       void setStatsInfo(omero::model::StatsInfo theStatsInfo);
       omero::RInt red;
       omero::RInt getRed();
       void setRed(omero::RInt theRed);
       omero::RInt green;
       omero::RInt getGreen();
       void setGreen(omero::RInt theGreen);
       omero::RInt blue;
       omero::RInt getBlue();
       void setBlue(omero::RInt theBlue);
       omero::RInt alpha;
       omero::RInt getAlpha();
       void setAlpha(omero::RInt theAlpha);
       omero::RString lookupTable;
       omero::RString getLookupTable();
       void setLookupTable(omero::RString theLookupTable);
       omero::model::LogicalChannel logicalChannel;
       omero::model::LogicalChannel getLogicalChannel();
       void setLogicalChannel(omero::model::LogicalChannel theLogicalChannel);
       omero::model::Pixels pixels;
       omero::model::Pixels getPixels();
       void setPixels(omero::model::Pixels thePixels);
       ChannelAnnotationLinksSeq annotationLinksSeq;
       bool annotationLinksLoaded;
       omero::sys::CountMap annotationLinksCountPerOwner;
       /*
        * Unloads the annotationLinks collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfAnnotationLinks() on how to test for unloaded collections.
        * See reloadAnnotationLinks() on how to reset the value.
        *
        */
       void unloadAnnotationLinks();
       int sizeOfAnnotationLinks();
       ChannelAnnotationLinksSeq copyAnnotationLinks();
       // See language-specific iterator methods
       void addChannelAnnotationLink(ChannelAnnotationLink target);
       /*
        * Adds all the members of the ChannelAnnotationLinksSeq sequence to
        * the annotationLinksSeq field.
        */
       void addAllChannelAnnotationLinkSet(ChannelAnnotationLinksSeq targets);
       void removeChannelAnnotationLink(ChannelAnnotationLink theTarget);
       /*
        * Removes all the members of the ChannelAnnotationLinksSeq sequence from
        * the annotationLinksSeq field.
        */
       void removeAllChannelAnnotationLinkSet(ChannelAnnotationLinksSeq targets);
       void clearAnnotationLinks();

       /*
        * Allows reloading the protected annotationLinks collection
        * from another instance of Channel. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadAnnotationLinks(Channel toCopy);
       omero::sys::CountMap getAnnotationLinksCountPerOwner();
       ChannelAnnotationLink linkAnnotation(Annotation addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addChannelAnnotationLinkToBoth(omero::model::ChannelAnnotationLink link, bool bothSides);
       ChannelAnnotationLinksSeq findChannelAnnotationLink(Annotation removal);
       void unlinkAnnotation(Annotation removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removeChannelAnnotationLinkFromBoth(omero::model::ChannelAnnotationLink link, bool bothSides);
       ChannelLinkedAnnotationSeq linkedAnnotationList();
     };
   };
 };
 #endif // CHANNEL_ICE
