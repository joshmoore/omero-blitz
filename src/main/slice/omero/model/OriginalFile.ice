    /*
    **   Generated by blitz/resources/templates/combined.vm
    **   See ../../README.ice for information on these types.
    **
    **   Copyright 2007, 2008 Glencoe Software, Inc. All rights reserved.
    **   Use is subject to license terms supplied in LICENSE.txt
    **
    */
 #ifndef ORIGINALFILE_ICE
 #define ORIGINALFILE_ICE
 #include <omero/model/IObject.ice>
 #include <omero/RTypes.ice>
 #include <omero/model/RTypes.ice>
 #include <omero/System.ice>
 #include <omero/Collections.ice>
 module omero {
   module model {
     class PixelsOriginalFileMap;
     class Pixels;
     class ChecksumAlgorithm;
     class FilesetEntry;
     class OriginalFileAnnotationLink;
     class Annotation;
     class Details;
     ["java:type:java.util.ArrayList"] sequence<omero::model::PixelsOriginalFileMap> OriginalFilePixelsFileMapsSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Pixels> OriginalFileLinkedPixelsSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::FilesetEntry> OriginalFileFilesetEntriesSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::OriginalFileAnnotationLink> OriginalFileAnnotationLinksSeq;
     ["java:type:java.util.ArrayList"] sequence<omero::model::Annotation> OriginalFileLinkedAnnotationSeq;
     ["protected"] class OriginalFile
     extends omero::model::IObject
     {
       omero::RInt version;
       omero::RInt getVersion();
       void setVersion(omero::RInt theVersion);
       OriginalFilePixelsFileMapsSeq pixelsFileMapsSeq;
       bool pixelsFileMapsLoaded;
       omero::sys::CountMap pixelsFileMapsCountPerOwner;
       /*
        * Unloads the pixelsFileMaps collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfPixelsFileMaps() on how to test for unloaded collections.
        * See reloadPixelsFileMaps() on how to reset the value.
        *
        */
       void unloadPixelsFileMaps();
       int sizeOfPixelsFileMaps();
       OriginalFilePixelsFileMapsSeq copyPixelsFileMaps();
       // See language-specific iterator methods
       void addPixelsOriginalFileMap(PixelsOriginalFileMap target);
       /*
        * Adds all the members of the OriginalFilePixelsFileMapsSeq sequence to
        * the pixelsFileMapsSeq field.
        */
       void addAllPixelsOriginalFileMapSet(OriginalFilePixelsFileMapsSeq targets);
       void removePixelsOriginalFileMap(PixelsOriginalFileMap theTarget);
       /*
        * Removes all the members of the OriginalFilePixelsFileMapsSeq sequence from
        * the pixelsFileMapsSeq field.
        */
       void removeAllPixelsOriginalFileMapSet(OriginalFilePixelsFileMapsSeq targets);
       void clearPixelsFileMaps();

       /*
        * Allows reloading the protected pixelsFileMaps collection
        * from another instance of OriginalFile. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadPixelsFileMaps(OriginalFile toCopy);
       omero::sys::CountMap getPixelsFileMapsCountPerOwner();
       PixelsOriginalFileMap linkPixels(Pixels addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addPixelsOriginalFileMapToBoth(omero::model::PixelsOriginalFileMap link, bool bothSides);
       OriginalFilePixelsFileMapsSeq findPixelsOriginalFileMap(Pixels removal);
       void unlinkPixels(Pixels removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removePixelsOriginalFileMapFromBoth(omero::model::PixelsOriginalFileMap link, bool bothSides);
       OriginalFileLinkedPixelsSeq linkedPixelsList();
       omero::RString path;
       omero::RString getPath();
       void setPath(omero::RString thePath);
       omero::RString repo;
       omero::RString getRepo();
       void setRepo(omero::RString theRepo);
       omero::RLong size;
       omero::RLong getSize();
       void setSize(omero::RLong theSize);
       omero::RTime atime;
       omero::RTime getAtime();
       void setAtime(omero::RTime theAtime);
       omero::RTime mtime;
       omero::RTime getMtime();
       void setMtime(omero::RTime theMtime);
       omero::RTime ctime;
       omero::RTime getCtime();
       void setCtime(omero::RTime theCtime);
       omero::model::ChecksumAlgorithm hasher;
       omero::model::ChecksumAlgorithm getHasher();
       void setHasher(omero::model::ChecksumAlgorithm theHasher);
       omero::RString hash;
       omero::RString getHash();
       void setHash(omero::RString theHash);
       omero::RString mimetype;
       omero::RString getMimetype();
       void setMimetype(omero::RString theMimetype);
       OriginalFileFilesetEntriesSeq filesetEntriesSeq;
       bool filesetEntriesLoaded;
       /*
        * Unloads the filesetEntries collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfFilesetEntries() on how to test for unloaded collections.
        * See reloadFilesetEntries() on how to reset the value.
        *
        */
       void unloadFilesetEntries();
       int sizeOfFilesetEntries();
       OriginalFileFilesetEntriesSeq copyFilesetEntries();
       // See language-specific iterator methods
       void addFilesetEntry(FilesetEntry target);
       /*
        * Adds all the members of the OriginalFileFilesetEntriesSeq sequence to
        * the filesetEntriesSeq field.
        */
       void addAllFilesetEntrySet(OriginalFileFilesetEntriesSeq targets);
       void removeFilesetEntry(FilesetEntry theTarget);
       /*
        * Removes all the members of the OriginalFileFilesetEntriesSeq sequence from
        * the filesetEntriesSeq field.
        */
       void removeAllFilesetEntrySet(OriginalFileFilesetEntriesSeq targets);
       void clearFilesetEntries();

       /*
        * Allows reloading the protected filesetEntries collection
        * from another instance of OriginalFile. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadFilesetEntries(OriginalFile toCopy);
       OriginalFileAnnotationLinksSeq annotationLinksSeq;
       bool annotationLinksLoaded;
       omero::sys::CountMap annotationLinksCountPerOwner;
       /*
        * Unloads the annotationLinks collection. Any access to this
        * collection will throw an omero.UnloadedCollectionException.
        *
        * See sizeOfAnnotationLinks() on how to test for unloaded collections.
        * See reloadAnnotationLinks() on how to reset the value.
        *
        */
       void unloadAnnotationLinks();
       int sizeOfAnnotationLinks();
       OriginalFileAnnotationLinksSeq copyAnnotationLinks();
       // See language-specific iterator methods
       void addOriginalFileAnnotationLink(OriginalFileAnnotationLink target);
       /*
        * Adds all the members of the OriginalFileAnnotationLinksSeq sequence to
        * the annotationLinksSeq field.
        */
       void addAllOriginalFileAnnotationLinkSet(OriginalFileAnnotationLinksSeq targets);
       void removeOriginalFileAnnotationLink(OriginalFileAnnotationLink theTarget);
       /*
        * Removes all the members of the OriginalFileAnnotationLinksSeq sequence from
        * the annotationLinksSeq field.
        */
       void removeAllOriginalFileAnnotationLinkSet(OriginalFileAnnotationLinksSeq targets);
       void clearAnnotationLinks();

       /*
        * Allows reloading the protected annotationLinks collection
        * from another instance of OriginalFile. The argument's collection
        * will be unloaded and all member entities will have their
        * inverse property altered.
        *
        * The argument's id must match and it's update id must be present and
        * greater than or equal to that of the current object.
        */
       void reloadAnnotationLinks(OriginalFile toCopy);
       omero::sys::CountMap getAnnotationLinksCountPerOwner();
       OriginalFileAnnotationLink linkAnnotation(Annotation addition);

       /*
        * Add the link to the current instance and if bothSides is true AND
        * the other side of the link is loaded, add the current instance to
        * it as well.
        */
       void addOriginalFileAnnotationLinkToBoth(omero::model::OriginalFileAnnotationLink link, bool bothSides);
       OriginalFileAnnotationLinksSeq findOriginalFileAnnotationLink(Annotation removal);
       void unlinkAnnotation(Annotation removal);

       /*
        * Remove the link from the current instance and if bothSides is true AND
        * the other side of the link is loaded, remove the current instance from
        * it as well.
        */
       void removeOriginalFileAnnotationLinkFromBoth(omero::model::OriginalFileAnnotationLink link, bool bothSides);
       OriginalFileLinkedAnnotationSeq linkedAnnotationList();
       omero::RString name;
       omero::RString getName();
       void setName(omero::RString theName);
     };
   };
 };
 #endif // ORIGINALFILE_ICE
